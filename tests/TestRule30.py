import json
import pySBOLx
import unittest
import os 

from SBOLUtilities import SBOLNamespace
from XplanDataParser import XplanDataParser

import xplan_to_sbol.__main__ as xbol
from sbol import *

''' 
	This module is used to test data generated from xplan to sbol for the rule of 30 challenge problem.
	
	author(s) : Tramy Nguyen
''' 

class TestRule30(unittest.TestCase):
	
	""" 
	This class will perform unit testing on the rule of 30 example that was generated by xplan2sbol converter.
	
	There are two options to run this module from the xplan_to_sbol directory:
	1. Run module as a standalone: python tests/TestRule30.py
	2. Run this module as a test suite : python tests/SBOLTestSuite.py
	"""
	@classmethod
	def setUpClass(cls):
		print("Running " + cls.__name__)
		rule30_json = 'example/xplan/rule30-Q0-v2.json'		
		rule30_sbol = 'example/sbol/rule30-Q0-v2.xml'
		
		cls.sbolDoc = Document()
		cls.sbolDoc.read(rule30_sbol)
		
		with open(rule30_json) as jsonFile:
				jsonData = json.load(jsonFile)
				cls.xplan_data = XplanDataParser(jsonData)

	def test_totalIds(self):
		expected_ids = list(range(0, 11))
		actual_ids = []
		for step_obj in self.xplan_data.get_stepsList():
			actual_ids.append(step_obj.get_id())
		# self.assertEqual(expected_ids, actual_ids)


	def test_step3Conversion(self):
		step_obj = self.xplan_data.get_step(3)
		oper_obj = step_obj.get_firstOperator()
		self.assertIsNotNone(oper_obj)
		samp_objs = oper_obj.get_samplesList()
		xplan_des = oper_obj.get_description()


		for sample in samp_objs:
			for uri in sample.get_uriList():
				sbol_id = uri.replace("_", "-")
				print(sbol_id)
				act_obj = self.sbolDoc.find(sbol_id)
				sbol_des = act_obj.getAnnotation(SBOLNamespace.DESCRIPTION_NS)
				self.assertEqual(xplan_des, sbol_des)

		# sbol_id = "http://hub.sd2e.org/user/sd2e/transcriptic_rule_30_q0_1_09242017/incubate_NEB_10_beta_pAN1201_1/1.0.0"
		# act_obj = self.sbolDoc.find(sbol_id)
		# print(act_obj.getAnnotation(SBOLNamespace.DESCRIPTION_NS))



if __name__ == '__main__':
	unittest.main()