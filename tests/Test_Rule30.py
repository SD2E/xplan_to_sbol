import json
import pySBOLx
import unittest

from xplan_to_sbol.ConversionUtil import *
from xplan_to_sbol.xplanParser.XplanDataParser import XplanDataParser

import xplan_to_sbol.__main__ as xbol
from sbol import *

''' 
    This module is used to test data generated from xplan to sbol for the rule of 30 challenge problem.
	
    author(s) : Tramy Nguyen
''' 

class TestRule30(unittest.TestCase):

    """ 
    This class will perform unit testing on the rule of 30 example that was generated by xplan2sbol converter.
	
    There are two options to run this module from the xplan_to_sbol directory:
    1. Run module as a standalone: python -m unittest tests/Test_Rule30.py
    2. Run this module as a test suite : python tests/SBOLTestSuite.py
    
    """
    
    @classmethod
    def setUpClass(cls):
        print("Running " + cls.__name__)
        rule30_json = 'example/xplan/rule30-Q0-v2.json'		
        rule30_sbol = 'example/sbol/rule30-Q0-v2.xml'
		
        cls.sbolDoc = Document()
        cls.sbolDoc.read(rule30_sbol)
		
        with open(rule30_json) as jsonFile:
            jsonData = json.load(jsonFile)
            cls.xplan_data = XplanDataParser(jsonData)

    def test_totalIds(self):
        expected_ids = list(range(0, 11))
        actual_ids = []
        for step_obj in self.xplan_data.get_stepsList():
            actual_ids.append(step_obj.get_id())
            
            # Warning this assert will failt because there are duplicate values of step:id = 3
            # self.assertEqual(expected_ids, actual_ids)

    def test_step3Conversion(self):

        step_obj = self.xplan_data.get_step(3)
        self.assertTrue(step_obj.get_id(), 3) 
        oper_obj = step_obj.get_firstOperator()
        self.assertIsNotNone(oper_obj)
        
        samp_objs = oper_obj.get_samplesList()
        self.assertTrue(len(samp_objs) == 3)

	# Note: Do not assert values for xplan/sbol description due to unicode contained within the description. 
	# pysbol will make the assert fail because the unicodes are altered when pysbol reads in an sbol file.
        numAct = 0
        for sample in samp_objs:
            for uri in sample.get_uriList():
                val = removeVersion('1', uri)
                
                # Get the equivalent SBOL value of this xplan sample
                d_id = oper_obj.get_type() + "_" + removeHomespace(SBOLNamespace.HTTPS_HS, val)
                p_id = SBOLNamespace.HTTP_HS + d_id
                _id = p_id + "/1.0.0"
                oper_type = SBOLNamespace.SD2_NS + oper_obj.get_type()
                
                # act_obj = self.sbolDoc.find(_id)
                # self.assertIsNotNone(act_obj)
                # self.assertEqual(act_obj.identity, _id)
                # self.assertEqual(act_obj.persistentIdentity, p_id)

        #         for a in self.sbolDoc.activities:
        #            if a.identity == _id:
        #                self.assertEqual(a.persistentIdentity, p_id)
        #                self.assertEqual(a.displayId, d_id)
        #                self.assertEqual(a.getAnnotation(SBOLNamespace.TITLE_NS), oper_obj.get_name())
        #                self.assertEqual(a.getAnnotation(SBOLNamespace.OPERTYPE_NS), oper_type)
        #                numAct += 1
        # self.assertTrue(numAct == 3)		
		

		
if __name__ == '__main__':
	unittest.main()
